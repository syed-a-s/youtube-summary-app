{"ast":null,"code":"var _jsxFileName = \"/home/nahin/Desktop/repos/youtube-summary-app/client/src/components/UrlInput/UrlInput.jsx\",\n  _s = $RefreshSig$();\nimport './UrlInput.css';\nimport React, { useState } from 'react';\nimport extractVideoId from '../../utils/extractVideoId.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UrlInput = ({\n  transcriptDataCallback,\n  summaryDataCallback\n}) => {\n  _s();\n  const [url, setUrl] = useState('');\n\n  // retrieves transcript from video id. called when users clicks submit\n  const fetchTranscriptData = async videoId => {\n    try {\n      const abortController = new AbortController(); // Create a new controller for each request\n      const response = await fetch(`/get-transcript/${videoId}`, {\n        signal: abortController.signal\n      });\n      const transcriptData = await response.json();\n      return transcriptData;\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        console.error(\"Request aborted:\", error);\n        return;\n      }\n      console.error(\"Error:\", error);\n    } finally {\n      console.log(\"finished attempt to retrieve transcript\");\n    }\n  };\n\n  // const fetchSummaryData = async (transcriptData) => {\n  //   try {\n  //     const response = await fetch('/get-summary/', {\n  //       method: 'POST',\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //       },\n  //       body: JSON.stringify({ transcript: transcript }),\n  //     });\n\n  //     if (!response.ok) {\n  //       throw new Error('Falied to fetch summary');\n  //     }\n\n  //     const summaryData = await response.data();\n  //     return summaryData;\n  //   } catch (error) {\n  //     console.error('Error', error);\n  //   } finally {\n  //     console.log(\"finished attempt to retrieve summary\")\n  //   }\n  // }\n\n  // extracts video id from url and calls fetchTranscriptData\n  // calls back transcript data to parent component\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const extractedVideoId = extractVideoId(url);\n    console.log(\"Video ID:\", extractedVideoId);\n    try {\n      const transcriptData = await fetchTranscriptData(extractedVideoId);\n      console.log(transcriptData);\n      // const summaryData = await fetchSummaryData(transcriptData);\n      transcriptDataCallback(transcriptData); // pass back transcript json back to parent\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // sets url to url on input\n  const handleInputChange = event => {\n    setUrl(event.target.value);\n    console.log(\"URL:\", url);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"url-input-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"url-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"url\",\n        value: url,\n        onChange: handleInputChange,\n        placeholder: \"Enter youtube url here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(UrlInput, \"ZV/BRor2ecoM1gSD+06O4c7I8qc=\");\n_c = UrlInput;\nexport default UrlInput;\nvar _c;\n$RefreshReg$(_c, \"UrlInput\");","map":{"version":3,"names":["React","useState","extractVideoId","jsxDEV","_jsxDEV","UrlInput","transcriptDataCallback","summaryDataCallback","_s","url","setUrl","fetchTranscriptData","videoId","abortController","AbortController","response","fetch","signal","transcriptData","json","error","name","console","log","handleSubmit","event","preventDefault","extractedVideoId","handleInputChange","target","value","className","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/nahin/Desktop/repos/youtube-summary-app/client/src/components/UrlInput/UrlInput.jsx"],"sourcesContent":["import './UrlInput.css';\n\nimport React, { useState } from 'react';\nimport extractVideoId from '../../utils/extractVideoId.js';\n\nconst UrlInput = ({ transcriptDataCallback, summaryDataCallback }) => {\n  const [url, setUrl] = useState('');\n\n  // retrieves transcript from video id. called when users clicks submit\n  const fetchTranscriptData = async (videoId) => {\n    try {\n      const abortController = new AbortController(); // Create a new controller for each request\n      const response = await fetch(`/get-transcript/${videoId}`, {\n        signal: abortController.signal,\n      });\n      const transcriptData = await response.json();\n      return transcriptData;\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        console.error(\"Request aborted:\", error);\n        return;\n      }\n      console.error(\"Error:\", error);\n    } finally {\n      console.log(\"finished attempt to retrieve transcript\");\n    }\n  };\n\n  // const fetchSummaryData = async (transcriptData) => {\n  //   try {\n  //     const response = await fetch('/get-summary/', {\n  //       method: 'POST',\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //       },\n  //       body: JSON.stringify({ transcript: transcript }),\n  //     });\n\n  //     if (!response.ok) {\n  //       throw new Error('Falied to fetch summary');\n  //     }\n\n  //     const summaryData = await response.data();\n  //     return summaryData;\n  //   } catch (error) {\n  //     console.error('Error', error);\n  //   } finally {\n  //     console.log(\"finished attempt to retrieve summary\")\n  //   }\n  // }\n\n  // extracts video id from url and calls fetchTranscriptData\n  // calls back transcript data to parent component\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const extractedVideoId = extractVideoId(url);\n    console.log(\"Video ID:\", extractedVideoId);\n\n    try {\n      const transcriptData = await fetchTranscriptData(extractedVideoId);\n      console.log(transcriptData)\n      // const summaryData = await fetchSummaryData(transcriptData);\n      transcriptDataCallback(transcriptData); // pass back transcript json back to parent\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // sets url to url on input\n  const handleInputChange = (event) => {\n    setUrl(event.target.value);\n    console.log(\"URL:\", url);\n  };\n\n  return (\n    <div className='url-input-container'>\n      <div className='url-input'>\n        <input\n          type='url'\n          value={url}\n          onChange={handleInputChange}\n          placeholder='Enter youtube url here'\n        />\n        <button onClick={handleSubmit} type='submit'>\n          Submit\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default UrlInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}